// Do NOT change. Changes will be lost next time file is generated

#define R__DICTIONARY_FILENAME goedmdict_root6

/*******************************************************************/
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <assert.h>
#define G__DICTIONARY
#include "RConfig.h"
#include "TClass.h"
#include "TDictAttributeMap.h"
#include "TInterpreter.h"
#include "TROOT.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"
#include <algorithm>
#include "TCollectionProxyInfo.h"
/*******************************************************************/

#include "TDataMember.h"

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

// Header files passed as explicit arguments
#include "goedmdict.h"

// Header files passed via #pragma extra_include

namespace ROOT {
   static TClass *golangcLcLgostring_Dictionary();
   static void golangcLcLgostring_TClassManip(TClass*);
   static void *new_golangcLcLgostring(void *p = 0);
   static void *newArray_golangcLcLgostring(Long_t size, void *p);
   static void delete_golangcLcLgostring(void *p);
   static void deleteArray_golangcLcLgostring(void *p);
   static void destruct_golangcLcLgostring(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::golang::gostring*)
   {
      ::golang::gostring *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::golang::gostring));
      static ::ROOT::TGenericClassInfo 
         instance("golang::gostring", "goedmdict.h", 6,
                  typeid(::golang::gostring), DefineBehavior(ptr, ptr),
                  &golangcLcLgostring_Dictionary, isa_proxy, 0,
                  sizeof(::golang::gostring) );
      instance.SetNew(&new_golangcLcLgostring);
      instance.SetNewArray(&newArray_golangcLcLgostring);
      instance.SetDelete(&delete_golangcLcLgostring);
      instance.SetDeleteArray(&deleteArray_golangcLcLgostring);
      instance.SetDestructor(&destruct_golangcLcLgostring);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::golang::gostring*)
   {
      return GenerateInitInstanceLocal((::golang::gostring*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::golang::gostring*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *golangcLcLgostring_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::golang::gostring*)0x0)->GetClass();
      golangcLcLgostring_TClassManip(theClass);
   return theClass;
   }

   static void golangcLcLgostring_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *golangcLcLgoslicelEdoublegR_Dictionary();
   static void golangcLcLgoslicelEdoublegR_TClassManip(TClass*);
   static void *new_golangcLcLgoslicelEdoublegR(void *p = 0);
   static void *newArray_golangcLcLgoslicelEdoublegR(Long_t size, void *p);
   static void delete_golangcLcLgoslicelEdoublegR(void *p);
   static void deleteArray_golangcLcLgoslicelEdoublegR(void *p);
   static void destruct_golangcLcLgoslicelEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::golang::goslice<double>*)
   {
      ::golang::goslice<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::golang::goslice<double>));
      static ::ROOT::TGenericClassInfo 
         instance("golang::goslice<double>", "goedmdict.h", 12,
                  typeid(::golang::goslice<double>), DefineBehavior(ptr, ptr),
                  &golangcLcLgoslicelEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(::golang::goslice<double>) );
      instance.SetNew(&new_golangcLcLgoslicelEdoublegR);
      instance.SetNewArray(&newArray_golangcLcLgoslicelEdoublegR);
      instance.SetDelete(&delete_golangcLcLgoslicelEdoublegR);
      instance.SetDeleteArray(&deleteArray_golangcLcLgoslicelEdoublegR);
      instance.SetDestructor(&destruct_golangcLcLgoslicelEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::golang::goslice<double>*)
   {
      return GenerateInitInstanceLocal((::golang::goslice<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::golang::goslice<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *golangcLcLgoslicelEdoublegR_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::golang::goslice<double>*)0x0)->GetClass();
      golangcLcLgoslicelEdoublegR_TClassManip(theClass);
   return theClass;
   }

   static void golangcLcLgoslicelEdoublegR_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *golangcLcLgoslicelEfloatgR_Dictionary();
   static void golangcLcLgoslicelEfloatgR_TClassManip(TClass*);
   static void *new_golangcLcLgoslicelEfloatgR(void *p = 0);
   static void *newArray_golangcLcLgoslicelEfloatgR(Long_t size, void *p);
   static void delete_golangcLcLgoslicelEfloatgR(void *p);
   static void deleteArray_golangcLcLgoslicelEfloatgR(void *p);
   static void destruct_golangcLcLgoslicelEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::golang::goslice<float>*)
   {
      ::golang::goslice<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::golang::goslice<float>));
      static ::ROOT::TGenericClassInfo 
         instance("golang::goslice<float>", "goedmdict.h", 12,
                  typeid(::golang::goslice<float>), DefineBehavior(ptr, ptr),
                  &golangcLcLgoslicelEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(::golang::goslice<float>) );
      instance.SetNew(&new_golangcLcLgoslicelEfloatgR);
      instance.SetNewArray(&newArray_golangcLcLgoslicelEfloatgR);
      instance.SetDelete(&delete_golangcLcLgoslicelEfloatgR);
      instance.SetDeleteArray(&deleteArray_golangcLcLgoslicelEfloatgR);
      instance.SetDestructor(&destruct_golangcLcLgoslicelEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::golang::goslice<float>*)
   {
      return GenerateInitInstanceLocal((::golang::goslice<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::golang::goslice<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *golangcLcLgoslicelEfloatgR_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::golang::goslice<float>*)0x0)->GetClass();
      golangcLcLgoslicelEfloatgR_TClassManip(theClass);
   return theClass;
   }

   static void golangcLcLgoslicelEfloatgR_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   static TClass *golangcLcLgoslicelEintgR_Dictionary();
   static void golangcLcLgoslicelEintgR_TClassManip(TClass*);
   static void *new_golangcLcLgoslicelEintgR(void *p = 0);
   static void *newArray_golangcLcLgoslicelEintgR(Long_t size, void *p);
   static void delete_golangcLcLgoslicelEintgR(void *p);
   static void deleteArray_golangcLcLgoslicelEintgR(void *p);
   static void destruct_golangcLcLgoslicelEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::golang::goslice<int>*)
   {
      ::golang::goslice<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::golang::goslice<int>));
      static ::ROOT::TGenericClassInfo 
         instance("golang::goslice<int>", "goedmdict.h", 12,
                  typeid(::golang::goslice<int>), DefineBehavior(ptr, ptr),
                  &golangcLcLgoslicelEintgR_Dictionary, isa_proxy, 0,
                  sizeof(::golang::goslice<int>) );
      instance.SetNew(&new_golangcLcLgoslicelEintgR);
      instance.SetNewArray(&newArray_golangcLcLgoslicelEintgR);
      instance.SetDelete(&delete_golangcLcLgoslicelEintgR);
      instance.SetDeleteArray(&deleteArray_golangcLcLgoslicelEintgR);
      instance.SetDestructor(&destruct_golangcLcLgoslicelEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::golang::goslice<int>*)
   {
      return GenerateInitInstanceLocal((::golang::goslice<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::golang::goslice<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *golangcLcLgoslicelEintgR_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::golang::goslice<int>*)0x0)->GetClass();
      golangcLcLgoslicelEintgR_TClassManip(theClass);
   return theClass;
   }

   static void golangcLcLgoslicelEintgR_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_golangcLcLgostring(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::gostring : new ::golang::gostring;
   }
   static void *newArray_golangcLcLgostring(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::gostring[nElements] : new ::golang::gostring[nElements];
   }
   // Wrapper around operator delete
   static void delete_golangcLcLgostring(void *p) {
      delete ((::golang::gostring*)p);
   }
   static void deleteArray_golangcLcLgostring(void *p) {
      delete [] ((::golang::gostring*)p);
   }
   static void destruct_golangcLcLgostring(void *p) {
      typedef ::golang::gostring current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::golang::gostring

namespace ROOT {
   // Wrappers around operator new
   static void *new_golangcLcLgoslicelEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::goslice<double> : new ::golang::goslice<double>;
   }
   static void *newArray_golangcLcLgoslicelEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::goslice<double>[nElements] : new ::golang::goslice<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_golangcLcLgoslicelEdoublegR(void *p) {
      delete ((::golang::goslice<double>*)p);
   }
   static void deleteArray_golangcLcLgoslicelEdoublegR(void *p) {
      delete [] ((::golang::goslice<double>*)p);
   }
   static void destruct_golangcLcLgoslicelEdoublegR(void *p) {
      typedef ::golang::goslice<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::golang::goslice<double>

namespace ROOT {
   // Wrappers around operator new
   static void *new_golangcLcLgoslicelEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::goslice<float> : new ::golang::goslice<float>;
   }
   static void *newArray_golangcLcLgoslicelEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::goslice<float>[nElements] : new ::golang::goslice<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_golangcLcLgoslicelEfloatgR(void *p) {
      delete ((::golang::goslice<float>*)p);
   }
   static void deleteArray_golangcLcLgoslicelEfloatgR(void *p) {
      delete [] ((::golang::goslice<float>*)p);
   }
   static void destruct_golangcLcLgoslicelEfloatgR(void *p) {
      typedef ::golang::goslice<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::golang::goslice<float>

namespace ROOT {
   // Wrappers around operator new
   static void *new_golangcLcLgoslicelEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::goslice<int> : new ::golang::goslice<int>;
   }
   static void *newArray_golangcLcLgoslicelEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::golang::goslice<int>[nElements] : new ::golang::goslice<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_golangcLcLgoslicelEintgR(void *p) {
      delete ((::golang::goslice<int>*)p);
   }
   static void deleteArray_golangcLcLgoslicelEintgR(void *p) {
      delete [] ((::golang::goslice<int>*)p);
   }
   static void destruct_golangcLcLgoslicelEintgR(void *p) {
      typedef ::golang::goslice<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::golang::goslice<int>

namespace {
  void TriggerDictionaryInitialization_goedmdict_root6_Impl() {
    static const char* headers[] = {
"goedmdict.h",
0
    };
    static const char* includePaths[] = {
"/usr/include/root",
"/home/binet/dev/go/gocode/src/github.com/go-hep/croot/bindings/src/",
0
    };
    static const char* fwdDeclCode = 
R"DICTFWDDCLS(
#pragma clang diagnostic ignored "-Wkeyword-compat"
#pragma clang diagnostic ignored "-Wignored-attributes"
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
extern int __Cling_Autoloading_Map;
namespace golang{struct __attribute__((annotate("$clingAutoload$goedmdict.h")))  gostring;}
namespace golang{template <typename T> struct __attribute__((annotate("$clingAutoload$goedmdict.h")))  goslice;
}
)DICTFWDDCLS";
    static const char* payloadCode = R"DICTPAYLOAD(

#ifndef G__VECTOR_HAS_CLASS_ITERATOR
  #define G__VECTOR_HAS_CLASS_ITERATOR 1
#endif

#define _BACKWARD_BACKWARD_WARNING_H
#include "goedmdict.h"

#undef  _BACKWARD_BACKWARD_WARNING_H
)DICTPAYLOAD";
    static const char* classesHeaders[]={
"golang::goslice<double>", payloadCode, "@",
"golang::goslice<float>", payloadCode, "@",
"golang::goslice<int>", payloadCode, "@",
"golang::gostring", payloadCode, "@",
nullptr};

    static bool isInitialized = false;
    if (!isInitialized) {
      TROOT::RegisterModule("goedmdict_root6",
        headers, includePaths, payloadCode, fwdDeclCode,
        TriggerDictionaryInitialization_goedmdict_root6_Impl, {}, classesHeaders);
      isInitialized = true;
    }
  }
  static struct DictInit {
    DictInit() {
      TriggerDictionaryInitialization_goedmdict_root6_Impl();
    }
  } __TheDictionaryInitializer;
}
void TriggerDictionaryInitialization_goedmdict_root6() {
  TriggerDictionaryInitialization_goedmdict_root6_Impl();
}
